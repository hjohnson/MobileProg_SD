MobileProg SD
A portable Arduinoª Programmer

	Objective: An easy to use, portable, and handheld programmer for Arduinoª compatible boards. Pin-compatible with the standard FTDI six-pin connector, so any devices compatible with it can plug directly in. (LilyPad, Bare Bomes Board, etc.) Does not supply power to the target, since it is assumed that it is being used in an embedded system.
	As a part of my internship, I designed and built an Arduinoª based mobile rover control unit, communicating with a remote control over a XBee connection, and having inputs from Phototransistors, lever switches, and other potential sensors.  Since this rover was used as a demo for a class, I wanted to be able to switch between different programs rapidly, for example in one demo showing off the phototransistors, in another example expressly showing off the bumper switches, and in yet another showing off the ability to control the roverÕs two speeds independently. What I found myself having to do to accomplish this, however, was either lug a laptop around everywhere, or else continually run the control card into the lab to reprogram it. 
	I have attempted to resolve this issue by designing a mobile programmer for Arduinoª compatible boards, utilizing the serial bootloader present on these boards. Its primary components are an SD card, for storing the Intel HEX files generated by the Arduino¨ compiler, a serial connection and reset line to the target Arduinoª for communication, and a user interface consisting of a small LCD and pair of switches, all on a small handheld device.
	The user formats an SD card and loads the necessary hex files produced by the Arduino IDE compiler onto its root directory, then plugs the SD card into the MobileProg SD.  When the programmer first resets, it initializes the SD card, and displays the first hex file in the directory. The user can use the ÒnextÓ key to scroll through the available hex files, and the ÒselectÓ key to select the desired program. At this point, the programmer attempts to open a communication line with the targetÕs bootloader, using a variety of different baud rates (to ensure compatibility with the various bootloaders being used.) Assuming the connection is successful, the programmer reads the signature bytes of the board to determine the target chip being used, then begins parsing the hex file and transferring the program to the target using the built-in bootloader commands, while displaying a progress bar on the LCD screen. When transferring is complete, the programmer disconnects from the target, leaving it to run the program independently. 

Load programs onto your Arduino board on the go!

